%YAML 1.2
---
name: Hjson
file_extensions:
  - hjson
scope: source.hjson
contexts:
  main:
    - include: comments
    - include: rootObject
    - include: value
  value:
    - include: constant
    - include: number
    - include: string
    - include: mlstring
    - include: array
    - include: object
    - include: comments
    - include: uqstring
  object:
    - match: '\{'
      scope: punctuation.definition.dictionary.begin.hjson
      push:
        - meta_scope: meta.structure.dictionary.hjson
        - match: '\}'
          scope: punctuation.definition.dictionary.end.hjson
          pop: true
        - include: string
        - include: keyname
        - include: comments
        # include \n to handle key/value in separate lines
        - match: ":\\s*\\n?"
          scope: punctuation.separator.dictionary.key-value.hjson
          push:
            - meta_scope: meta.structure.dictionary.value.hjson
            # optional newline
            - match: '^\s*\n'
              scope: meta.structure.dictionary.value.newline.hjson
            - match: '(,)|\n|(?=\})'
              captures:
                1: punctuation.separator.dictionary.pair.hjson
              pop: true
            - include: value
            - match: '[^\s,]'
              scope: invalid.illegal.expected-dictionary-separator.hjson
        - match: '[^\s\}]'
          scope: invalid.illegal.expected-dictionary-separator.hjson
  # a root object is only allowed at the root level where it can be
  # specified without the enclosing {}
  rootObject:
    - match: '(?=\s*(([^,\{\[\}\]\s]+)|"(?:[^"\\]|\\.)*")\s*:)'
      push:
        - meta_scope: meta.structure.dictionary.hjson
        - include: string
        - include: keyname
        - include: comments
        # include \n to handle key/value in separate lines
        - match: ":\\s*\\n?"
          scope: punctuation.separator.dictionary.key-value.hjson
          push:
            - meta_scope: meta.structure.dictionary.value.hjson
            # optional newline
            - match: '^\s*\n'
              scope: meta.structure.dictionary.value.newline.hjson
            - match: '(,)|\n|(?=\})'
              captures:
                1: punctuation.separator.dictionary.pair.hjson
              pop: true
            - include: value
            - match: '[^\s,]'
              scope: invalid.illegal.expected-dictionary-separator.hjson
        - match: '[^\s\}]'
          scope: invalid.illegal.expected-dictionary-separator.hjson
  array:
    - match: '\['
      scope: punctuation.definition.array.begin.hjson
      push:
        - meta_scope: meta.structure.array.hjson
        - match: '\]'
          scope: punctuation.definition.array.end.hjson
          pop: true
        - include: value
        - match: ","
          scope: punctuation.separator.array.hjson
        - match: '[^\s\]]'
          scope: invalid.illegal.expected-array-separator.hjson
  comments:
    - match: /\*\*
      scope: punctuation.definition.comment.hjson
      push:
        - meta_scope: comment.block.documentation.hjson
        - match: \*/
          pop: true
    - match: /\*
      scope: punctuation.definition.comment.hjson
      push:
        - meta_scope: comment.block.hjson
        - match: \*/
          pop: true
    - match: (//).*$
      scope: comment.line.double-slash.js
      captures:
        1: punctuation.definition.comment.hjson
    - match: (#).*$
      scope: comment.line.double-slash.js
      captures:
        1: punctuation.definition.comment.hjson
  constant:
    - match: \b(?:true|false|null)\b
      scope: constant.language.hjson
  keyname:
    - match: '\b([^,\{\[\}\]\s]+)\s*(?=:)'
      scope: string.quoted.keyname.hjson
  string:
    - match: '"'
      scope: punctuation.definition.string.begin.hjson
      push:
        - meta_scope: string.quoted.double.hjson
        - match: '"'
          scope: punctuation.definition.string.end.hjson
          pop: true
        - match: |-
            (?x:                # turn on extended mode
              \\                # a literal backslash
              (?:               # ...followed by...
                ["\\/bfnrt]     # one of these characters
                |               # ...or...
                u               # a u
                [0-9a-fA-F]{4}  # and four hex digits
              )
            )
          scope: constant.character.escape.hjson
        - match: \\.
          scope: invalid.illegal.unrecognized-string-escape.hjson
  uqstring:
    - match: '([^:,0-9\-\{\[\}\]\s].*)$'
      scope: string.quoted.unquoted.hjson
  mlstring:
    - match: '('''''')'
      captures:
        0: punctuation.definition.string.begin.hjson
      push:
        - meta_scope: string.quoted.multiline.hjson
        - match: '('''''')'
          captures:
            0: punctuation.definition.string.end.hjson
          pop: true
  number:
    # handles integer and decimal numbers
    - match: |-
        (?x:         # turn on extended mode
          -?         # an optional minus
          (?:
            0        # a zero
            |        # ...or...
            [1-9]    # a 1-9 character
            \d*      # followed by zero or more digits
          )
          (?:
            (?:
              \.     # a period
              \d+    # followed by one or more digits
            )?
            (?:
              [eE]   # an e character
              [+-]?  # followed by an option +/-
              \d+    # followed by one or more digits
            )?       # make exponent optional
          )?         # make decimal portion optional
        )
      scope: constant.numeric.hjson
